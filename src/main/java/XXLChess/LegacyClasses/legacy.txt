@Override
    public void mousePressed(MouseEvent e) {
        int mouseX = e.getX();
        int mouseY = e.getY();
        boolean clickValid = false;
        
        if ( (UI.isGameOver() == false) & (turnState == humanPlayer.getColour()) ) {
            Tile tile = tiles.checkTile(mouseX, mouseY); // checks mouse xy is in a tile x/y.
            if (tile != null) {
                ChessPiece piece = pieces.getPiece(tile.getRow(), tile.getCol());
                // INSTANCE ONE: 
                //  Player hasnt selected anything, and they want to click a valid piece.
                if ((humanPlayer.hasSelected() == false) & (tile.getOccupied())) {

                    if (piece.getColour() == humanPlayer.getColour()) {
                        clickValid = true;
                        humanPlayer.select(tile, piece, tiles, pieces, UI);
                    }
                // INSTANCE TWO
                // Player already has a piece selected but aborts that for another piece.
                } else if ((humanPlayer.hasSelected() == true) & (tile.getOccupied()) 
                        & (piece.getColour() == humanPlayer.getColour())) {

                    clickValid = true;
                    humanPlayer.select(tile, piece, tiles, pieces, UI);

                // INSTANCE THREE
                // Player has selected a piece and wants to make a move. 
                } else if (humanPlayer.hasSelected() == true) {
                    Move selectedMove = humanPlayer.isValidMove(tile.getRow(), tile.getCol());
                    if (selectedMove != null) {
                        // get row/col for click and move piece or capture & move. 
                        humanPlayer.makeMove(selectedMove, tiles, pieces);
                        // get x/y for animation
                        changeTurn();
                    }
                }
            }
        }

        // All conditions checked. 
        if (!clickValid) {
            humanPlayer.deselect(tiles, pieces);
        }
    }

    /**
     * tick():
     * Updates every second (60 frames)
     */
    private void tick() {

        // check game over condition for timer. 
        if ( (UI.getTimer(humanPlayer.getColour()).getTime() == 0) ) {
            UI.gameOver(GameOver.TIME, false);
        } else if (UI.getTimer(aiPlayer.getColour()).getTime() == 0) {
            UI.gameOver(GameOver.TIME, true);
        }

        // timer decreases 
        if (UI.isGameOver() == false) {
            UI.updateTimers(turnState);
        }

        if ((turnState == aiPlayer.getColour()) & (tickTime == 5)) {
            changeTurn();
        }
    }

    private void changeTurn() {
        // TODO: check for checkmate & set game over accordingly, make AI do their turn. 
        if (turnState == Colour.WHITE) {
            turnState = Colour.BLACK;
            UI.incrementTimer(Colour.WHITE);
        } else {
            turnState = Colour.WHITE;
            UI.incrementTimer(Colour.BLACK);
        }
    }

    public Tile checkTile(int mouseX, int mouseY) {
        Tile tile;

        for (int row = 0; row < tiles.length; row++) {
            for (int col = 0; col < tiles[row].length; col++) {
                tile = tiles[row][col];

                // Check if mouse press is within bounds of tile. 
                if ( (mouseX > tile.getX() & mouseX < (tile.getX() + App.CELLSIZE))
                     & (mouseY > tile.getY() & mouseY < (tile.getY() + App.CELLSIZE)) ) {
                    return tile;                   
                }
            }
        }
        return null;
    }